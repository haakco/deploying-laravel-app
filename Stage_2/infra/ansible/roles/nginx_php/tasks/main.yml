---
- name: Add nginx stable repository from PPA and install its signing key on Ubuntu target
  ansible.builtin.apt_repository:
    repo: 'ppa:nginx/stable'

- name: Add Onreg PHP PPA
  ansible.builtin.apt_repository:
    repo: 'ppa:ondrej/php'

- name: Install NGINX
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 600
    name:
      - nginx

- name: Install PHP and PHP Modules
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 600
    name:
      - php{{ php_ver }}
      - php{{ php_ver }}-cli
      - php{{ php_ver }}-fpm
      - php{{ php_ver }}-bcmath
      - php{{ php_ver }}-common
      - php{{ php_ver }}-curl
      - php{{ php_ver }}-dev
      - php{{ php_ver }}-gd
      - php{{ php_ver }}-gmp
      - php{{ php_ver }}-grpc
      - php{{ php_ver }}-igbinary
      - php{{ php_ver }}-imagick
      - php{{ php_ver }}-intl
      - php{{ php_ver }}-mcrypt
      - php{{ php_ver }}-mbstring
      - php{{ php_ver }}-mysql
      - php{{ php_ver }}-opcache
      - php{{ php_ver }}-pcov
      - php{{ php_ver }}-pgsql
      - php{{ php_ver }}-protobuf
      - php{{ php_ver }}-redis
      - php{{ php_ver }}-soap
      - php{{ php_ver }}-sqlite3
      - php{{ php_ver }}-ssh2
      - php{{ php_ver }}-xml
      - php{{ php_ver }}-zip

- name: Add postgresql repository
  ansible.builtin.apt_repository:
    repo: "deb https://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present
    filename: pgdg.list

- name: Install Postgres Client
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 600
    name:
      - postgresql-client

- name: Download composer installer
  get_url:
    dest: /usr/src/composer-setup.php
    url: https://getcomposer.org/installer

- name: Download and install Composer
  shell: "php /usr/src/composer-setup.php --install-dir=/bin --filename=composer"
  args:
    chdir: /usr/src/
    creates: /bin/composer
    warn: false

- name: Make sure we have all the latest python3 requirements to install certbot
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 600
    autoremove: yes
    autoclean: yes
    name:
      - python3
      - python3-venv
      - libaugeas0
      - python3-pip

- name: Install certbot via pip to get verison that supports the newere cloudflair api token
  pip:
    name:
      - certbot
      - certbot-nginx
      - cloudflare
      - certbot-dns-cloudflare
    extra_args: ' --upgrade '
    virtualenv: /opt/certbot/
    virtualenv_command: /usr/bin/python3 -m venv

- name: Remove default nginx config
  file:
    name: /etc/nginx/sites-enabled/default
    state: absent

- name: Create directory for site
  ansible.builtin.file:
    name: /var/www/site/public
    state: directory

- name: Add index file to test that everything is working
  ansible.builtin.template:
    src: templates/index.html.j2
    dest: /var/www/site/public/index.html

- name: Install system nginx config
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/nginx.conf

- name: Install nginx site for http to https redirect
  ansible.builtin.template:
    src: templates/nginx-http.j2
    dest: /etc/nginx/sites-enabled/http

- name: Reload nginx to activate letsencrypt site
  ansible.builtin.service:
    name: nginx
    state: restarted

- name: create letsencrypt secrets dir
  ansible.builtin.file:
    name: /root/.secrets/certbot
    state: directory

- name: Creating a file with content
  ansible.builtin.copy:
    dest: /root/.secrets/certbot/cloudflare.ini
    mode: 0600
    content: |
      # Cloudflare API token used by Certbot
      dns_cloudflare_api_token = {{ lookup('env', 'CLOUDFLARE_API_TOKEN') }}

- name: Create letsencrypt certificate
  ansible.builtin.shell: /opt/certbot/bin/certbot certonly -n --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} -d www.{{ domain_name }}
  args:
    creates: /etc/letsencrypt/live/{{ domain_name }}

- name: Generate dhparams
  ansible.builtin.shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates: /etc/nginx/dhparams.pem

- name: Install nginx site for specified site
  ansible.builtin.template:
    src: templates/nginx-le.j2
    dest: /etc/nginx/sites-enabled/le

- name: Reload nginx to activate specified site
  ansible.builtin.service:
    name: nginx
    state: restarted

- name: Add letsencrypt cronjob for cert renewal
  ansible.builtin.cron:
    name: letsencrypt_renewal
    special_time: weekly
    job: /opt/certbot/bin/certbot --renew certonly -n --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} -d www.{{ domain_name }}

